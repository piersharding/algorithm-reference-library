---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dask-worker
  namespace: default
spec:
  selector:
    matchLabels:
      k8s-app: dask-worker
  replicas: ${WORKER_REPLICAS}
  template:
    metadata:
      labels:
        k8s-app: dask-worker
    spec:
      # hostNetwork: true
      imagePullSecrets:
        - name: arlregcred
      containers:
      - name: worker
        image: ${DOCKER_IMAGE}
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            memory: "${WORKER_MEM}"    # 512Mi = 0.5 GB mem
            cpu: "${WORKER_CPU}"       # 500m = 0.5 CPU
        command:
          - /usr/local/bin/start-dask-worker.sh
        env:
          - name: DASK_HOST_NAME
            value: "0.0.0.0"
            # valueFrom:
            #   fieldRef:
            #     fieldPath: status.podIP
          - name: DASK_SCHEDULER
            value: "dask-scheduler.default.svc.cluster.local"
          - name: DASK_PORT_NANNY
            value: "8789"
          - name: DASK_PORT_WORKER
            value: "8788"
          - name: DASK_PORT_SCHEDULER
            value: "8786"
          - name: DASK_PORT_BOKEH
            value: "8787"
          - name: DASK_LOCAL_DIRECTORY
            value: "/var/tmp"
          - name: DASK_RESOURCES
            value: ""
          - name: K8S_APP_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: DASK_UID
            valueFrom:
              fieldRef:
                fieldPath: metadata.uid
          - name: DASK_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: DASK_CPU_LIMIT
            valueFrom:
              resourceFieldRef:
                containerName: worker
                resource: limits.cpu
          - name: DASK_MEM_LIMIT
            valueFrom:
              resourceFieldRef:
                containerName: worker
                resource: limits.memory
        volumeMounts:
        - mountPath: /var/tmp
          name: localdir
          readOnly: false
        - mountPath: /arl/data
          name: arldata
          readOnly: false
        ports:
        - name: worker
          containerPort: 8786
        - name: bokeh
          containerPort: 8787
        readinessProbe:
          httpGet:
            path: /json/identity.json
            port: 8787
          initialDelaySeconds: 60
          timeoutSeconds: 10
          periodSeconds: 20
          failureThreshold: 3
      volumes:
      - hostPath:
          path: /var/tmp
          type: DirectoryOrCreate
        name: localdir
      # - hostPath:
      #     path: ${WORKER_ARL_DATA}
      #     type: DirectoryOrCreate
      #   name: arldata
      - name: arldata
        nfs:
          server: ${NFS_SERVER}
          path: "/data"
