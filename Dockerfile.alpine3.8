# Universal image for running Notebook, Dask pipelines, libs, and lint checkers
ARG PYTHON=python3

FROM alpine:3.8

ARG PYTHON

MAINTAINER Piers Harding "piers@catalyst.net.nz"

ENV HOME /root

# runtime specific environment
ENV JENKINS_URL 1
ENV PYTHONPATH /arl
ENV JUPYTER_PATH /arl/examples/arl

RUN touch "${HOME}/.bash_profile"

# Bundle app source
ADD ./docker/boot.sh /
ADD ./Makefile /arl/
ADD ./setup.py ./README.md /arl/
ADD ./data_models /arl/data_models/
ADD ./examples /arl/examples/
ADD ./ffiwrappers /arl/ffiwrappers/
ADD ./k8s /arl/k8s/
ADD ./processing_components /arl/processing_components/
ADD ./processing_library /arl/processing_library/
ADD ./scripts /arl/scripts/
ADD ./tests /arl/tests/
ADD ./util /arl/util/
ADD ./workflows /arl/workflows/
ADD ./wrappers /arl/wrappers/

# Add and install Python modules
ADD ./requirements.txt /src/requirements.txt

# the package basics for Python 3
RUN apk add --update --no-cache ${PYTHON} py3-pip \
    openssl ca-certificates

#  openblas-dev

RUN \
    apk add --update --no-cache --virtual build-dependencies \
    wget bash make tini \
    git curl net-tools vim \
    py3-virtualenv \
    py3-nose nodejs nodejs-npm \
    graphviz freetype libpng \
    python3-tkinter \
    py3-lxml py3-numpy py3-numpy-f2py py-numpy-dev \
    libgomp lapack && \
    apk add --update --no-cache --virtual .build-deps \
    build-base  python3-dev freetype-dev libpng-dev \
    gcc gfortran musl-dev g++ bzip2-dev coreutils \
    dpkg-dev dpkg expat-dev gdbm-dev libc-dev \
    libnsl-dev openssl-dev libtirpc-dev \
    linux-headers ncurses-dev pax-utils \
    readline-dev sqlite-dev tcl-dev tk tk-dev \
    xz-dev zlib-dev libxml2-dev libxslt-dev \
    libffi-dev lapack-dev jpeg-dev && \
    apk add --repository http://dl-cdn.alpinelinux.org/alpine/edge/testing --update hdf5-dev && \
    wget -qO- https://github.com/git-lfs/git-lfs/releases/download/v2.4.2/git-lfs-linux-amd64-2.4.2.tar.gz | tar xz && \
    mv git-lfs-*/git-lfs /usr/bin/ && rm -rf git-lfs-* && \
    git lfs install && \
    ln -s /usr/include/locale.h /usr/include/xlocale.h && \
    if [ ! -f /usr/bin/node ]; then ln -s /usr/bin/nodejs /usr/bin/node ; fi && \
    node --version && \
    wget --quiet https://github.com/krallin/tini/releases/download/v0.18.0/tini && \
    echo "12d20136605531b09a2c2dac02ccee85e1b874eb322ef6baf7561cd93f93c855 *tini" | sha256sum -c - && \
    mv tini /usr/local/bin/tini && \
    chmod +x /usr/local/bin/tini && \
    cd /src && wget https://bootstrap.pypa.io/get-pip.py && \
    python3 get-pip.py --disable-pip-version-check \
        --no-cache-dir "pip" && \
    rm -f get-pip.py && \
    pip3 install bokeh && \
    pip3 install pytest && \
    pip3 install flake8 && \
    pip3 install Cython && \
    cd /src && pip3 install -r requirements.txt && \
    pip3 install jupyter_nbextensions_configurator && \
    pip3 install jupyter_contrib_nbextensions && \
    pip3 install -U pylint && \
    rm -rf /root/.cache && \
    jupyter contrib nbextension install --system --symlink && \
    jupyter nbextensions_configurator enable --system && \
    cd /src && \
    wget -qO- http://heasarc.gsfc.nasa.gov/FTP/software/fitsio/c/cfitsio_latest.tar.gz | tar xz && \
    cd /src/cfitsio && \
    ./configure --prefix=/usr && \
    make && make install && \
    rm -rf /src/cfitsio && \
    cd /arl && \
    ${PYTHON} setup.py build && \
    ${PYTHON} setup.py install && \
    cp /arl/build/lib*/*arlffi* /arl/ && \
    cd /arl/workflows/ffiwrapped/serial && \
    make && \
    apk del .build-deps && \
    rm -rf /var/cache/apk/*

# python must exist
RUN \
    if [ ! -f /usr/bin/python ]; then ln -s /usr/bin/python3 /usr/bin/python ; fi

# additional optional extensions
#RUN pip3 install jupyterlab
#RUN jupyter serverextension enable --py jupyterlab --sys-prefix
#RUN jupyter labextension install @jupyter-widgets/jupyterlab-manager
#RUN jupyter labextension install jupyterlab_bokeh

# create space for libs
RUN mkdir -p /arl/test_data /arl/test_results && \
    chmod 777 /arl /arl/test_data /arl/test_results && \
    chmod -R a+w /arl

COPY --chown="1000:100" ./docker/jupyter_notebook_config.py "${HOME}/.jupyter/"
COPY ./docker/notebook.sh /usr/local/bin/
COPY ./docker/start-dask-scheduler.sh /usr/local/bin/
COPY ./docker/start-dask-worker.sh /usr/local/bin

# We share in the arl data here
VOLUME ["/arl/data", "/arl/tmp"]

# Expose Jupyter and Bokeh ports
EXPOSE  8888 8786 8787 8788 8789

# Setup the entrypoint or environment
ENTRYPOINT ["/sbin/tini", "--"]

# Run - default is notebook
CMD ["/boot.sh"]
